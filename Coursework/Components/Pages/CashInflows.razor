@page "/CashInflows"
@rendermode InteractiveServer

<div class="cashinflow-form">
	<h2>CashInflows</h2>

	@if (!string.IsNullOrEmpty(_message))
	{
		<div class="alert">@_message</div>
	}
	
	<input class="input-field" type="text" @bind="_balance" placeholder="Amount" required>
	<br />
	<input class="input-field" type="text" @bind="_source" placeholder="Source" required>
	<br />
	<input class="input-field" type="date" @bind="_date" placeholder="Date" required>
	<br />
	<select @bind="_type">
		@foreach (var cashInflow in Enum.GetNames(typeof(option.Cash_Inflow)))
		{
			<option value="@cashInflow">@cashInflow</option>
		}
	</select>
	<br />
	<select @bind="_tag">
		@for (int i = 0; i < Current_Account._tags.Count; i++)
		{
			<option value="@i">@Current_Account._tags[i]._tags</option>
		}
	</select>
	<br />
	<input class="input-field" type="text" @bind="_note" placeholder="Note">
	<br />

	<button class="submit-btn" @onclick="OnClick" type="submit">Add Inflow</button>
</div>



@code {
	public int _balance;
	public string _source;
	public DateOnly _date = DateOnly.FromDateTime(DateTime.Today);
	public int _tag;
	public string _note;

	public string _message; 

	public option.Cash_Inflow _type = option.Cash_Inflow.Credit;

	public void OnClick()
	{
		Current_Account._currentAccount.History(new Transaction(_balance, _type, _source, _date, _tag+1, _note));
		Current_Account._currentAccount.UpdateBalance();
		_message = "Successfully Added";
		Current_Account.DatabaseExtraction();
		Current_Account.DebtHistoryExtraction();
	}
}

