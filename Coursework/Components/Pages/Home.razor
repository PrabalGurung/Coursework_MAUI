@page "/Home"
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>
<h3>Welcome, @Current_Account._currentAccount._name</h3>
<p>Your Current Balance: @Current_Account._currentAccount._balance</p>

<button class="submit-btn" @onclick="AdvanceSearch" type="submit">Advance Search</button>
@if (advanceSearch)
{
    <input class="input-field" type="date" @bind="initialDate" placeholder="Date">
    <input class="input-field" type="date" @bind="finalDate" placeholder="Date">

    <select @bind="_typeInflow">
        @foreach (var cashInflow in Enum.GetNames(typeof(option.Cash_Inflow)))
        {
            <option value="@cashInflow">@cashInflow</option>
        }
    </select>

    <select @bind="_typeOutflow">
        @foreach (var cashInflow in Enum.GetNames(typeof(option.Cash_Outflow)))
        {
            <option value="@cashInflow">@cashInflow</option>
        }
    </select>

    <select @bind="_status">
        <option>Pending</option>
        <option>Cleared</option>
    </select>

    <select @bind="_order">
        <option>date</option>
        <option>source</option>
    </select>
    <button class="submit-btn" @onclick="filter" type="submit">Advance Search</button>
}

<button class="submit-btn" @onclick="SortDate" type="submit">Sort Date</button>

@if (Current_Account._currentAccount._transaction.Count > 0)
{
    <table border="1">
        <tr>
            <td> Amount</td>
            <td> Date</td>
            <td> Inflow</td>
            <td> OutFlow</td>
            <td> Debt</td>
            <td> Outstanding Amount</td>
        </tr>
        @foreach (var transaction in Current_Account._currentAccount._transaction)
        {
            <tr>
                <td>@transaction._balance</td>
                <td>@transaction._date</td>
                @if(transaction._inflowType != option.Cash_Inflow.choose)
                {
                    <td>@transaction._inflowType</td>
                    <td>--</td>              
                    <td>--</td>

                    TotalInFlow(transaction._balance);
                    MaxMinInflow(transaction._balance);
                }
                else if (transaction._outflowType != option.Cash_Outflow.choose)
                {
                    <td>--</td>
                    <td>@transaction._outflowType</td>
                    <td>--</td>

                    TotalOutFlow(transaction._balance);
                    MaxMinOutflow(transaction._balance);
                } else
                {
                    <td>--</td>
                    <td>--</td>
                    <td>@transaction._debt</td>

                    TotalDebt(@transaction._balance, transaction._used);
                    MaxMinDebt(transaction._balance);
                }
                <td>@transaction._used</td>
            </tr>
            Tran();
        }
        <tr>
            <td></td>
            <td></td>
            <td>@totalInflow</td>
            <td>@totalOutflow</td>
            <td>@totalDebt</td>
            <td>Total Transaction: @trans</td>
        </tr>
    </table>
}
else
{
    <p>No transactions available.</p>
}

<h3>Inflow</h3>
<label>@highestInflow</label>
<label>@lowestInflow</label>

<h3>Outflow</h3>
<label>@highestOutflow</label>
<label>@lowestOutflow</label>

<h3>Debt</h3>
<label>@highestDebt</label>
<label>@lowestDebt</label>

@code{
    int totalInflow;
    int totalOutflow;
    int totalDebt;
    int trans;
    int highestInflow = 0;
    int lowestInflow = 1000000;
    int highestOutflow = 0;
    int lowestOutflow = 100000;
    int highestDebt = 0;
    int lowestDebt = 10000;

    string _status;
    string _order;

    DateOnly initialDate;
    DateOnly finalDate;

    bool advanceSearch = false;

    public option.Cash_Outflow _typeOutflow = option.Cash_Outflow.debit;
    public option.Cash_Inflow _typeInflow = option.Cash_Inflow.Credit;

    public void TotalInFlow(int balance)
    {
        totalInflow += balance;
    }

    public void TotalOutFlow(int balance)
    {
        totalOutflow += balance;
    }

    public void TotalDebt(int balance, int paid)
    {
        totalDebt += balance - paid;
    }

    public void Tran()
    {
        trans = totalInflow + totalDebt - totalOutflow;
    }

    public void MaxMinInflow(int balance)
    {
        if (balance > highestInflow)
        {
            highestInflow = balance;
        }

        if (balance < lowestInflow)
        {
            lowestInflow = balance;
        }
    }

    public void MaxMinOutflow(int balance)
    {
        if (balance > highestOutflow)
        {
            highestOutflow = balance;
        }
        if (balance < lowestOutflow)
        {
            lowestOutflow = balance;
        }
    }

    public void MaxMinDebt(int balance)
    {
        if (balance > highestDebt)
        {
            highestDebt = balance;
        }
        if (balance < lowestDebt)
        {
            lowestDebt = balance;
        }
    }

    public void SortDate()
    {
        Console.WriteLine("axa");
        Current_Account.DropTable();
        Current_Account.SortDate(1);
    }

    public void AdvanceSearch()
    {
        if (advanceSearch == false)
        {
            advanceSearch = true;
        } 
        else
        {
            advanceSearch = false;
        }
    }

    public void filter()
    {
        Console.WriteLine(initialDate);
        Console.WriteLine("axa");
        Current_Account.DropTable();
        Current_Account.Filter(1, initialDate, finalDate, _typeInflow.ToString(), _typeOutflow.ToString(), _status, "", _order);
        Console.WriteLine("sakyo");
    }
}