@page "/Home"
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h3>Welcome, @Current_Account._currentAccount._name</h3>
<p>Your Current Balance: @Current_Account._currentAccount._balance</p>

@if (!advanceSearch)
{
	<button class="submit-btn" @onclick="AdvanceSearch" type="submit">Advance Search</button>
}
@if (advanceSearch)
{
	<input class="input-field" type="date" @bind="initialDate" placeholder="Date">
	<input class="input-field" type="date" @bind="finalDate" placeholder="Date">

	<input class="input-field" type="text" @bind="_title" placeholder="Title">

	<select @bind="_typeInflow">
		@foreach (var cashInflow in Enum.GetNames(typeof(option.Cash_Inflow)))
		{
			<option value="@cashInflow">@cashInflow</option>
		}
	</select>

	<select @bind="_typeOutflow">
		@foreach (var cashInflow in Enum.GetNames(typeof(option.Cash_Outflow)))
		{
			<option value="@cashInflow">@cashInflow</option>
		}
	</select>

	<select @bind="_status">
		<option>Pending</option>
		<option>Clear</option>
	</select>

	<select @bind="_tag">
		@for (int i = 0; i < Current_Account._tags.Count; i++)
		{
			<option value="@Current_Account._tags[i]._tags">@Current_Account._tags[i]._tags</option>
		}
	</select>

	<select @bind="_order">
		<option value="date">date</option>
		<option value="source">source</option>
		<option value="tag">tag</option>
		<option value="no">no sort</option>
	</select>

	<br />

	<button class="submit-btn" @onclick="Filtering" type="submit">Filter/Sort Search</button>
}

<br />
<br />
<h4> Table of Transaction History</h4>

@if (Current_Account._currentAccount._transaction.Count > 0)
{
	<table border="1">
		<tr>
			<td> Amount</td>
			<td> Date</td>
			<td> Inflow</td>
			<td> OutFlow</td>
			<td> Debt</td>
			<td> Tags</td>
			<td> Source</td>
		</tr>
		@foreach (var transaction in Current_Account._currentAccount._transaction)
		{
			<tr>
				<td>@transaction._balance</td>
				<td>@transaction._date</td>
				@if (transaction._inflowType != option.Cash_Inflow.choose)
				{
					<td>@transaction._inflowType</td>
					<td>--</td>
					<td>--</td>

					TotalInFlow(transaction._balance);
					MaxMinInflow(transaction._balance);
				}
				else if (transaction._outflowType != option.Cash_Outflow.choose)
				{
					<td>--</td>
					<td>@transaction._outflowType</td>
					<td>--</td>

					TotalOutFlow(transaction._balance);
					MaxMinOutflow(transaction._balance);
				}
				else
				{
					<td>--</td>
					<td>--</td>
					@if (string.Equals(transaction._debt, "Pending"))
					{
						<td style="background-color: red; color: white;">@transaction._debt</td>
					}
					else
					{
						<td style="background-color: green; color: white;">@transaction._debt</td>
					}

					TotalDebt(@transaction._balance, transaction._used);
					MaxMinDebt(transaction._balance);
				}
				<td>@transaction._tags</td>
				<td>@transaction._source</td>
			</tr>
			Tran();
		}
		<tr>
			<td></td>
			<td>Total:</td>
			<td>@totalInflow</td>
			<td>@totalOutflow</td>
			<td>@totalDebt</td>
			<td>Total Transaction: @trans</td>
		</tr>
	</table>
}
else
{
	<p>No transactions available.</p>
}

<h3>Inflow</h3>
<label>@highestInflow</label>
<label>@lowestInflow</label>

<h3>Outflow</h3>
<label>@highestOutflow</label>
<label>@lowestOutflow</label>

<h3>Debt</h3>
<label>@highestDebt</label>
<label>@lowestDebt</label>
<br />


<h4>Debt History</h4>
@if (Current_Account.dUs.Count > 0)
{
	<table border="1">
		<tr>
			<td>user</td>
			<td>inflow</td>
			<td>debt</td>
			<td>Used Amount</td>
			<td>Outstanding Amount</td>
			<td>Inflow source</td>
		</tr>
		@foreach (var history in Current_Account.dUs)
		{
			<tr>
				<td>@history.user</td>
				<td>@history.inflow</td>
				<td>@history.debt</td>
				<td>@history.userAmount</td>
				<td>@history.outstandingAmount</td>
				<td>@history.source</td>
			</tr>
		}
	</table>
}
else
{
	<p>No Debt History available.</p>
}

@code {
	int totalInflow;
	int totalOutflow;
	int totalDebt;
	int trans;
	int highestInflow = 0;
	int lowestInflow = 1000000;
	int highestOutflow = 0;
	int lowestOutflow = 1000000;
	int highestDebt = 0;
	int lowestDebt = 1000000;

	string _title;
	string _status;
	string _order;
	string _tag;

	DateOnly initialDate;
	DateOnly finalDate;

	bool advanceSearch = false;

	public option.Cash_Outflow _typeOutflow = option.Cash_Outflow.debit;
	public option.Cash_Inflow _typeInflow = option.Cash_Inflow.Credit;

	public void TotalInFlow(int balance)
	{
		totalInflow += balance;
	}

	public void TotalOutFlow(int balance)
	{
		totalOutflow += balance;
	}

	public void TotalDebt(int balance, int paid)
	{
		totalDebt += balance - paid;
	}

	public void Tran()
	{
		trans = totalInflow + totalDebt - totalOutflow;
	}

	public void MaxMinInflow(int balance)
	{
		if (balance > highestInflow)
		{
			highestInflow = balance;
		}

		if (balance < lowestInflow)
		{
			lowestInflow = balance;
		}
	}

	public void MaxMinOutflow(int balance)
	{
		if (balance > highestOutflow)
		{
			highestOutflow = balance;
		}
		if (balance < lowestOutflow)
		{
			lowestOutflow = balance;
		}
	}

	public void MaxMinDebt(int balance)
	{
		if (balance > highestDebt)
		{
			highestDebt = balance;
		}
		if (balance < lowestDebt)
		{
			lowestDebt = balance;
		}
	}

	public void SortDate()
	{
		Current_Account.DropTable();
		Current_Account.SortDate(1);
	}

	public void AdvanceSearch()
	{
		if (advanceSearch == false)
		{
			advanceSearch = true;
		}
		else
		{
			advanceSearch = false;
		}
	}

	public void Filtering()
	{
		totalInflow = 0;
		totalOutflow = 0;
		totalDebt = 0;
		Current_Account.DropTable();
		Current_Account.Filter(1, initialDate, finalDate, _typeInflow.ToString(), _typeOutflow.ToString(), _status, _tag, _order, _title);
	}
}