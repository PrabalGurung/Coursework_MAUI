@page "/CashOutflows"
@rendermode InteractiveServer

<div class="cashoutflow-form">
	<h2>CashOutflows</h2>
	<input class="input-field" type="text" @bind="_balance" placeholder="Username" required>
	<input class="input-field" type="text" @bind="_source" placeholder="Source" required>
	<input class="input-field" type="date" @bind="_date" placeholder="Date" required>
	<select @bind="_type">
		@foreach (var cashInflow in Enum.GetNames(typeof(option.Cash_Outflow)))
		{
			<option value="@cashInflow">@cashInflow</option>
		}
	</select>
	<button class="submit-btn" @onclick="OnClick" type="submit">Add Inflow</button>
</div>
<p role="status">Current count: @Current_Account._currentAccount._balance</p>
<p role="status">Local balance: @_balance</p>

@if (!string.IsNullOrEmpty(message))
{
	<div class="message">@message</div>
}
@code {
	public int _balance;
	public string _source;
	public DateOnly _date;

	public bool success;
	public string message;

	public option.Cash_Outflow _type = option.Cash_Outflow.debit;

	public void OnClick()
	{
		success = Current_Account._currentAccount.History(new Transaction(_balance, _type, _source, _date));
		Current_Account._currentAccount.UpdateBalance();
		if (success)
		{
			message = "added successfully";
		} else
		{
			message = "insufficient balance";
		}
		Current_Account.DatabaseExtraction();
	}
}
